
# The workings of the site

## What users see

Like all modules, the Joyce library is organized into items, like books, newspapers, articles, and collections, like magazines, book collections, encyclopaedias and newspaper editions.

Each module consists of 4 web page views:

- homepage,
- collection view,
- item view,
- page view.

The homepage presents a list of available collections. Clicking on the "MORE" link directs to detailed information about the collection, and shows any items or subcollections contained therein. For example, the [Books at the Wake](/library/books-at-the-wake) collection contains books that have been connected to the composition of *Finnegans Wake*. 

Choosing one of these books, for instance [*Les Monstres Humains*](/library/virtual-library/books-at-the-wake/item:les-monstres-humains-histoire-superstitions-croyances/), provides an overview of the scanned pages that contain reading traces. In addition, the toolbar on the left contains some useful links with information about the item in the following order (if available):

- a link to more scans,
- a list of all reading traces for this particular item,
- links to all notebooks that include notes taken from this item,
- a link to the connection tool that creates a connection tree starting from this item as the root.

Clicking on one of the pages that contain reading traces refers to a detailed page view. Each reading trace is listed and is associated with a toolbar on its left-hand side that includes the same information as an item:

- links to notes that are related to the reading trace,
- a link to the connection tool that creates a connection tree starting from this reading trace as the root.

## What users don't see
The [admin](/admin) page can be accessed by clicking on the admin link in the settings list. After logging in, a list of all modules with their models can be seen. Clicking on one of the models shows the data available in that model. For example, the model `library collection` gives a list of collections such as the Sunday Independent, Freeman's Journal, or Books at the Wake. The model `library items` returns all items in the library.

Although it seems self evident, a careful explanation of the distinction between a "collection" and an "item" is useful here. Collections contain items. They can be whole libraries, but also newspapers collections or encyclopedias. Items can be books, articles, issues, lemmas, etc. In order to avoid unexpected behaviour of the website, it is important to be aware of the way an object is recognized and visualised by the database.

The latter issue is not trivial, as some objects may be suitable both as a collection and an item. For instance, the [Encyclopaedia Britannica](/library/encyclopaedia-britannica-11th-edition/) could be classified as a collection containing entries, or as an item within the extant or virtual library collection. In this case, we have chosen to classify it as a collection, because the focus will not be on the [Encyclopaedia]() in itself, but rather to its lemmas. The distinction between lemmas has shown to be of great importance in Joyce's note taking, as a lemma title is sometimes enough for Joyce to make a note. [The Decline and Fall of the Roman Empire](/library/virtual-library/books-at-the-wake/item:the-decline-and-fall-of-the-roman/), on the other hand, which exists of 6 volumes, is classified as an item of the virtual library. Another reason for this decision is the content of the objects. While [The Decline and Fall](/library/virtual-library/books-at-the-wake/item:the-decline-and-fall-of-the-roman/) only incorporates about 50 relevant pages, the amount of pages is much larger for the Encycopaedia.

Clicking on a collection of item reveals all specific data available. These data are called fields, such as a title, author, publisher, etc.

## Adding data

A new collection can be made by clicking on the `Library Collection` section and choosing `add new collection`. Empty fields are available to connect relevant information to the collection. When finished, save the collection by clicking the `save` button.

A new item can be added to the database in the same way, but, in this case, it allows the addition of more specialised bibliographical information such as author(s), a publisher, a publication date, etc. An extra field for external links can be used to refer to a complete digitisation elsewhere.

The database saves two kinds of names for the images: `page_number` and `actual_page_number`. The first is the only required field to save a new page. Somewhat counterintuitively, this field is not considered an integer by the database, but by a string of characters. In that case, the database can distinguish between  However, the `page_number` identifier has to be different from all the other images, so be sure that all images have **unique** names.

> A naming convention for `page_number` is the following: X-Y,Z-A
	
For `X` the capitalized three first letters of the last name of the author, `Y` the capitalized three first letters of the item, and `Z` the page number or page identifier. Use a hyphen to distinguish between identifiers (`A`).

Example:

	SUL-BOO,45-46.jpg
	CAU-MON,5.png

For newspapers, the identifier is slightly different. `X` is the capitalized three letters of the issue; `Y` is a number derived from the date of the issue.

Example:

	FRJ-19220224,5.png

Represents the 5th page of an issue of the Freeman's Journal of 24 February 1922.

The following names are recognized as title pages, acknowledgement pages, figures, etc:

> frontcover,
> title-page,
> half-title,
> flyleaf,
> ex-libris,
> note,
> colophon,
> epigraph,
> table-of-contents,
> chart,
> acknowledgement,
> dedication,
> bibliography,
> index,
> backcover.

In the case of multiple title pages or charts, use a hyphenated identifier. For example:

	SUL-BOO,frontcover.jpg
	HEN-FOU,title-page-v.jpg
	GWY-HIS,chart-a.png

Next to `page number`, each image also receives a so-called `actual page number`. This is a non-unique page number that ignores the unique `X-Y` identifier, and allows all pages to be numerically ordered. When a new image is saved, an `actual page number` is automatically created. (This is done by calling Python's `split(",")` function  on `page number`. That is why the naming convention is so important next to uniqueness!)

Notebooks can be added by clicking on the `add new notebook` button in the `Notebook` section of the admin area. The notebook title **must** have a name according to [the James Joyce Catalog of the University of Buffalo](http://library.buffalo.edu/pl/collections/jamesjoyce/catalog/index.php). Put differently, a notebook title must start according to the following classification code:

> collection_identifier(dot)notebook_identifier(dot)notebook_number(dot)

For example:
	
	VI.B.1.
	V.A.3.
	V.A.1.b.i.

The database will not accept names that do not have these identifiers. (Alternatively, it *may* accept them and crash.)

***

# Remarks for admins
These notes are important if to know before everything else in case you want to add data to the database. If not, you can skip to "The workings of the site".

## HTML in transcriptions
The transcription of the notes and manuscript pages (which admins will be able to add and change) are not escaped. This means that they are marked as "safe", that HTML tags will not be removed, and that it is possible to use an XML-based transcription and visualise it in the website. 

>  Warning: Transcriptions are allowed to have <script> tags. Because these tags are not deleted by default, an adversary could crash the website by inserting a malicious script. Therefore never allow unknown people to add data to the database!

## Markdown
Most database objects provide an `info` field, which includes an explanation of the current collection or item. These fields are automatically converted from [Markdown](https://daringfireball.net/projects/markdown/) for simplicity and safety, meaning that all HTML tags will be escaped. Fortunately, Markdown is easy to use and has the simple advantage that no tags need to be used. (This document has also been created using Markdown; it is possible to inspect the raw file [here](raw-markdown).)

***

# Coding info

## Run the site locally

If someone needs to be able to use the site locally, follow these steps to install the required packages and settings. This guide assumes that Python has been installed on the user's computer. Check if the Python package handler `pip` is correctly installed as well:

	$ python --version
	$ pip --version

The guide also assumes you have a mysqldump file in your possession that can recreate the database.

**1) Install the MySQL database program**

The site uses the popular database tool MySQL. Install the program for your operating system via the [official website](https://dev.mysql.com/doc/refman/5.7/en/windows-installation.html). I will assume that you can access the root user with a password. To test this, see if you can gain access to the MySQL client using the following command.

	$ mysql -u root -p

**2) Synchronize the complete database**

Save the mysqldump file in your home folder. Now log into the MySQL client using the command above. The following lines will create and reconstruct the complete database.

	mysql> create database jjdlp;
	mysql> use jjdlp;
	mysql> source mysqldump.sql;

Now that the database is ready, we can install the required code.

**3) Make a virtual environment** (not required)

Python provides a useful tool to keep development environment separate from each other. This is called a "virtual" environment. Install this both with the package `virtualenvwrapper`, which makes it easier to work with the environments. Note that this step is not required, but is certainly 

	$ pip install virtualenv
	$ pip install virtualenvwrapper

Then in your home directory, open the file `.bashrc` (also called `.bash_profile`) and type the following lines in them:

	# where to store our virtual envs
	export WORKON_HOME=$HOME/virtualenvs
	# where projects will reside
	export PROJECT_HOME=$HOME/projects-venvs
	# where is the virtualenvwrapper.sh
	source /usr/local/bin/virtualenvwrapper.sh

Save the file. Now you should be able to create a virtualenvironment using

	$ mkvirtualenv jjdlp

This creates a new environment called "jjdlp". It must first be activated using 

	$ workon jjdlp

The `workon` command activates the virtual environment, and everything that is installed will be sealed off in it. To return outside the virtual environment write

	$ deactivate jjdlp

**4) Get the files and install the required packages**

Copy the complete site folder (JJDLP/) to a location of your choice. (If you're in a virtualenv, this will be inside the environment's bin/ folder.) Then get into the `JJDLP/` folder and type in a terminal

	$ pip install -r requirements.txt

This will install all the necessary requirements for the site to run. The requirements file can also be found on the site's [Github repository](https://github.com/tdekeyser/jjdlp/edit/master/requirements.txt).

**5) Point to the correct image database folder**

Now that all the requirements are installed, the site must now know where the image files are stored. Open the file `JJDLP/settings.py`, and change the value of `MEDIA_ROOT` to the path to the image database folder (starting from the root, e.g. your home directory).

	MEDIA_ROOT = os.path.join('[your/path/to/the/folder]/database', 'media')

**6) Point to the database**

The program also needs to be able to access the database. In the `JJDLP/settings.py` file, find the variable `DATABASES` and change the value of `PASSWORD` to your own MySQL password for root user.

**7) Run the website**

The site is now ready to be run. Open a terminal, get into the virtual environment, go to the `JJDLP/` folder and type

	$ python manage.py runserver

If all is well, the last lines of the output should be

	Django version 1.8, using settings 'JJDLP.settings'
	Starting development server at http://127.0.0.1:8000/
	Quit the server with CONTROL-C.

In a browser, the website will be running at `http://127.0.0.1:8000/`.

## connect

**PathwayTree(), PathwayBranch() and GraphLayout() :** Builds writing pathways as `Tree` objects. The class iteratively builds simple tree structures,
represented as a set of nodes accompanied with layer numbers. It has a `PathwayBranch` object that selects a single branch from the `PathwayTree` object. In order to visualise the tree using the Javascript library [D3](https://d3js.org/), wrap the tree object in a `GraphLayout` to convert the tree into json format.

The nodes of each tree object are developed using queries into the database. These queries have been programmatically constrained such that a query deeper in the tree is controlled, logical and (from the perspective of genetic criticism) valid.

Example usage:

	$ python manage.py shell
	>>> from connect.pathway import PathwayTree
	>>> tree = PathwayTree('fishing at home and abroad', 'libraryitem')
	>>> tree.grow(2)					# grow the tree by 2 layers
	>>> print tree
	[(0, []/Fishing at Home and Abroad), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,191|616), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,103|613), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,38|614), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,51|615), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,103|613]/VI.B.2.053(e)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,38|614]/VI.B.2.053(f)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,191|616]/VI.B.2.053(i)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,51|615]/VI.B.2.053(g))]

Example graph usage:

	>>> from connect.graph import GraphLayout
	>>> graph = GraphLayout(tree)		# wrap tree in a graph layout
	>>> print graph.layout
	{'nodes': [{'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,51|615', 'pk': 615L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(f)', 'pk': 57792L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,103|613', 'pk': 613L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(i)', 'pk': 57795L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(g)', 'pk': 57793L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(e)', 'pk': 57791L}, {'referent': 'libraryitem', 'layer': 0, 'name': 'Fishing at Home and Abroad', 'pk': 23L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,191|616', 'pk': 616L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,38|614', 'pk': 614L}], 'edges': [{'source': 6, 'target': 7}, {'source': 6, 'target': 7}, {'source': 6, 'target': 2}, {'source': 6, 'target': 2}, {'source': 6, 'target': 0}, {'source': 6, 'target': 0}, {'source': 6, 'target': 8}, {'source': 6, 'target': 8}, {'source': 7, 'target': 3}, {'source': 0, 'target': 4}, {'source': 2, 'target': 5}, {'source': 8, 'target': 1}]}

## Linking items

When new data has been added to the database, it is possible that connections exist the added data and the current data. These connections are links between any database field of a different module. These links are usually based in the `Note` section and typically come in the following form:

 - from a note to a library excerpt,
 - from a note to a manuscript excerpt,
 - from a note to a novel line.

Linking items can be done *manually* in the "change item" section or *programmatically* using the Linkify() class. The class allows to search and match existing `Notes` and `LibraryExcerpts` in the database. The `Notes` and `LibraryExcerpts` need to be uploaded to be found, so the class will not upload new excerpts or notes.

The program looks for matches between a note's Source content with a library excerpt's content. The standard word span of the search query is 5 words. Sometimes, this is not enough to find all connections. The word limit can be increased by changing the left and right border of the search query. Logically, a smaller border will generate more connections, but will also
generate more false positives (i.e. those that are classified as a match, but are actually not a match). These matches have to be removed by hand. Good test borders are: L=0, R=8; L=10, R=18. For more specialised info, see the coding section below.

**Linkify() :** Search and match existing Notes and LibraryExcerpts in the database.
The Notes and LibraryExcerpts have to be uploaded to be found,
i.e. this program will NOT upload new excerpts or notes.

Usage:

	$ python manage.py shell
	>> from scripts.link.linkify import Linkify
	>> n = 'VI.B.1.'
	>> l = Linkify(n)
	>> l.linkify()

It is possible to explore the found connections without having them
saved to the database immediately. This can be done by setting the
bool test variable to True.

	>> l.test = True

Calling l.linkify() will then display all found connections, but will
not permanently save them to the database. Reversing the test environment
is done by resetting bool test to False:

	>> l.test = False

The standard word span of the search query is 5 words. Sometimes, this
is not enough to find all connections. You can change the word limit by
changing the left and right border of the search query using:

	>> l.set_content_right_limit(<int>)
	>> l.set_content_left_limit(<int>)

Logically, a smaller border will generate more connections, but will also
generate more false positives (which sadly have to be removed by hand).
Good test borders are: L=0, R=8; L=10, R=18.

## Useful commands and packages

Check ./manage.py commands:	

	$ python manage.py


Create new app:

	$ python manage.py startapp newapp

In order to do migrations in a new app, do

	$ python manage.py makemigrations newapp

then

	$ python manage.py migrate

If this fails, try to adapt the database by hand and fake the migration by adding the `--fake` flag.

	$ python manage.py migrate --fake

This should rebuild the database.

	$ python manage.py sqlmigrate

returns the SQL code that should change db accordingly.

Renew search index ([Haystack](http://django-haystack.readthedocs.org/en/v2.4.0/)): Create the following files:
'search_indexes.py' in app dir,
'*targetmodel*_text.py' in project templates/search/indexes/app/ dir

	$ python manage.py rebuild_index
or	

	$ python manage.py update_index

to update or rebuild the search index. 

Clear cache ([Sorl-thumbnail](https://sorl-thumbnail.readthedocs.org/en/latest/)): First delete the /media/cache folder.
Then,

	$ python manage.py thumbnail cleanup

According to Sorl's docs, "this cleans up the Key Value Store from stale cache. It removes
references to images that do not exist and thumbnail references and their actual files for
images that do not exist. It removes thumbnails for unknown images."

Harsher,

	$ python manage.py thumbnail clear_delete_all

"Equivalent to to clear but afterwards it will delete all thumbnail files including any
orphans	not in the Key Value Store. This can be thought of as a more aggressive version of
clear_delete_referenced. Caution should be exercised with this command if multiple Django
sites (as in SITE_ID) or projects are using the same MEDIA_ROOT since this will clear out
absolutely everything in the thumbnail cache directory causing thumbnail regeneration for
all sites and projects. When file system storage is used, it is equivalent to
rm -rf MEDIA_ROOT + THUMBNAIL_PREFIX."

Create database visualisation ([django-extensions](http://django-extensions.readthedocs.org/en/latest/)): For app1 and app2,

	$ python manage.py graph_models app1 app2 -g -o models.png

For all apps,

	$ python manage.py graph_models -a -g -o models.png

Change database by hand ([MySQL](https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial)): Connect to the MySQL server with the following command:

	$ mysql -u root -p

Convenient commands:

	>> SHOW DATABASES;
	>> USE database;
	>> SHOW tables;
	>> DESCRIBE table;

Force remove a table (even with a foreign key constraint):

	>> SET foreign_key_check = 0;
	>> DROP TABLE table;
	>> SET foreign_key_check = 1;

Change character set of MySQL to avoid strange unicode errors, according to [this thread](http://stackoverflow.com/questions/1008287/illegal-mix-of-collations-mysql-error):

	>> SET collation_connection = 'utf8_general_ci'

then for your databases

	>> ALTER DATABASE db CHARACTER SET utf8 COLLATE utf8_general_ci

	>> ALTER TABLE table CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci

Sometimes, this may throw a Foreign Key error. In that case, do

	>> SET FOREIGN_KEY CHECKS=0;

Remember to set it back to the default after it.

	>> SET FOREIGN_KEY CHECKS=1;

MySQL sneaks swedish in there sometimes for no sensible reason. Change the MySQL character set to avoid strange errors of the form:

	>> `Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='`


[TOC]
