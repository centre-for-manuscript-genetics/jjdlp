	! DANGER !

	The transcription of the notes and manuscript pages (which admins will be able to add and change) are not escaped. They are marked as "safe", meaning that <html> tags will not be removed.	This is a very important issue, because these XMLs may include <script> tags that will not be deleted. Malicious people could thereby crash the website.

	Solution: perhaps use django-bleach to ensure absence of <script> tags via whitelists?


This text has been written during the development of the website between 2015-2018, i.e. during the PhD years of Tom De Keyser, and serves as a practical aid for (future) administrators and developers of the project. A first section focuses on the layout of the database. Detailed coding information is given in a second section.


## 1. The database
### 1.1. A note on [Markdown](https://daringfireball.net/projects/markdown/)
***
Most database objects provide an `info` field, which includes an explanation of the current collection or item. These fields are automatically converted from [Markdown](https://daringfireball.net/projects/markdown/) for simplicity and safety, meaning that all HTML tags will be escaped. Fortunately, Markdown is easy to use and has the simple advantage that no tags need to be used. (This document has also been created using Markdown; it is possible to inspect the raw file [here](raw-markdown).)

### 1.2. Adding collections and items
***
#### 1.2.1. Libraryitems and collections

Although it seems self evident, a careful explanation of the distinction between a `collection` and an `item` is useful here. Collections contain items. They can be whole libraries, but also newspapers collections or encyclopedias. `Items` can be books, articles, issues, lemmas, etc. In order to avoid unexpected behaviour of the website, it is important to be aware of the way an object is recognized and visualised by the database.

The latter issue is not trivial, as some objects may be suitable both as a collection and an item. For instance, the [Encyclopaedia Britannica]() could be classified as a collection containing entries, or as an item within the extant or virtual library collection. In this case, we have chosen to classify it as a collection, because the focus will not be on the [Encyclopaedia]() in itself, but rather to its lemmas. The distinction between lemmas has shown to be of great importance in Joyce's note taking, as a lemma title is sometimes enough for Joyce to make a note. [The Decline and Fall of the Roman Empire](), on the other hand, which exists of 6 volumes, is classified as an item of the virtual library. Another reason for this decision is the content of the objects. While [The Decline and Fall]() only incorporates about 50 relevant pages, the amount of pages is much larger for the Encycopaedia.

A new `collection` can be made by clicking on the `Library Collections` section and choosing `add new collection`. Empty fields are available to connect relevant information to the collection. When finished, save the collection by clicking the `save` button.

A new `item` can be added to the database in the same way, but, in this case, it allows the addition of more specialised bibliographical information such as author(s), a publisher, a publication date, etc. An extra field for external links can be used to refer to a complete digitisation elsewhere.

#### 1.2.2. Notebooks

`Notebooks` can be added by clicking on the `add new notebook` button in the `Notebook` section of the admin area. The notebook title **must** have a name according to [the James Joyce Catalog of the University of Buffalo](http://library.buffalo.edu/pl/collections/jamesjoyce/catalog/index.php). Put differently, a notebook title must start according to the following classification code:

> collection_identifier(dot)notebook_identifier(dot)notebook_number(dot)

For example:
	
	VI.B.1.
	V.A.3.
	V.A.1.b.i.

The database will not accept names that do not have these identifiers. (Alternatively, it *may* accept them and crash.)


### 1.3. Adding images
***

The database saves two kinds of names for the images: `page number` and `actual page number`. The first is the only required field to save a new page. Somewhat counterintuitively, this field is not considered an integer by the database, but by a string of characters. In that case, the database can distinguish between  However, the `page number` identifier has to be different from all the other images, so be sure that all images have **unique** names.

A naming convention for `page number` is the following:

> X-Y,Z-A
	
For `X` the capitalized three first letters of the last name of the author, `Y` the capitalized three first letters of the item, and `Z` the page number or page identifier. Use a hyphen to distinguish between identifiers (`A`).

Example:

	SUL-BOO,45-46.jpg
	CAU-MON,5.png

For newspapers, the identifier is slightly different. `X` is the capitalized three letters of the issue; `Y` is a number derived from the date of the issue.

Example:

	FRJ-19220224,5.png

Stands for the 5th page of an issue of the Freeman's Journal of 24 February 1922.

The following names are recognized as title pages, acknowledgement pages, figures, etc:

> frontcover,
> title-page,
> half-title,
> flyleaf,
> ex-libris,
> note,
> colophon,
> epigraph,
> table-of-contents,
> chart,
> acknowledgement,
> dedication,
> bibliography,
> index,
> backcover.

In the case of multiple title pages or charts, use a hyphenated identifier. For example:

	SUL-BOO,frontcover.jpg
	HEN-FOU,title-page-v.jpg
	GWY-HIS,chart-a.png

Next to `page number`, each image also receives a so-called `actual page number`. This is a non-unique page number that ignores the unique `X-Y` identifier, and allows all pages to be numerically ordered. When a new image is saved, an `actual page number` is automatically created. (This is done by simply calling Python's `split(',')` function  on `page number`. That is why the naming convention is so important next to uniqueness!)

### 1.3. Adding notes
***




### 1.4. Linking items
***

When new data has been added to the database, it is possible that connections exist the added data and the current data. These connections are links between any database field of a different module. These links are usually based in the `Note` section and typically come in the following form:

> - from a note to a library excerpt,
> - from a note to a manuscript excerpt,
> - from a note to a novel line.

Linking items can be done manually in the "change item" section or programmatically using the Linkify() class. The class allows to search and match existing `Notes` and `LibraryExcerpts` in the database. The `Notes` and `LibraryExcerpts` need to be uploaded to be found, so the class will not upload new excerpts or notes.

The program looks for matches between a note's Source content with a library excerpt's content. The standard word span of the search query is 5 words. Sometimes, this is not enough to find all connections. The word limit can be increased by changing the left and right border of the search query. Logically, a smaller border will generate more connections, but will also
generate more false positives (i.e. those that are classified as a match, but are actually not a match). These matches have to be removed by hand. Good test borders are: L=0, R=8; L=10, R=18. For more specialised info, see the coding section below.

.

.

##2. Coding info

### Database tools and classes
***
#### 1. database connections - Linkify()

Search and match existing Notes and LibraryExcerpts in the database.
The Notes and LibraryExcerpts have to be uploaded to be found,
i.e. this program will NOT upload new excerpts or notes.

Usage:

	$ python manage.py shell
	>> from scripts.link.linkify import Linkify
	>> n = 'VI.B.1.'
	>> l = Linkify(n)
	>> l.linkify()

It is possible to explore the found connections without having them
saved to the database immediately. This can be done by setting the
bool test variable to True.

	>> l.test = True

Calling l.linkify() will then display all found connections, but will
not permanently save them to the database. Reversing the test environment
is done by resetting bool test to False:

	>> l.test = False

The standard word span of the search query is 5 words. Sometimes, this
is not enough to find all connections. You can change the word limit by
changing the left and right border of the search query using:

	>> l.set_content_right_limit(<int>)
	>> l.set_content_left_limit(<int>)

Logically, a smaller border will generate more connections, but will also
generate more false positives (which sadly have to be removed by hand).
Good test borders are: L=0, R=8; L=10, R=18.

.

#### 2. connect - PathwayTree(), PathwayBranch() and GraphLayout()

Builds writing pathways as `Tree` objects. The class iteratively builds simple tree structures,
represented as a set of nodes accompanied with layer numbers. It has a `PathwayBranch` object that selects a single branch from the `PathwayTree` object. In order to visualise the tree using the Javascript library [D3](https://d3js.org/), wrap the tree object in a `GraphLayout` to convert the tree into json format.

The nodes of each tree object are developed using queries into the database. These queries have been programmatically constrained such that a query deeper in the tree is controlled, logical and (from the perspective of genetic criticism) valid.

Example usage:

	$ python manage.py shell
	>>> from connect.pathway import PathwayTree
	>>> tree = PathwayTree('fishing at home and abroad', 'libraryitem')
	>>> tree.grow(2)					# grow the tree by 2 layers
	>>> print tree
	[(0, []/Fishing at Home and Abroad), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,191|616), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,103|613), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,38|614), (1, [[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,51|615), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,103|613]/VI.B.2.053(e)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,38|614]/VI.B.2.053(f)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,191|616]/VI.B.2.053(i)), (2, [[[]/Fishing at Home and Abroad, []/Fishing at Home and Abroad]/MAX-FIS,51|615]/VI.B.2.053(g))]

Example graph usage:

	>>> from connect.graph import GraphLayout
	>>> graph = GraphLayout(tree)		# wrap tree in a graph layout
	>>> print graph.layout
	{'nodes': [{'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,51|615', 'pk': 615L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(f)', 'pk': 57792L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,103|613', 'pk': 613L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(i)', 'pk': 57795L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(g)', 'pk': 57793L}, {'referent': 'note', 'layer': 2, 'name': 'VI.B.2.053(e)', 'pk': 57791L}, {'referent': 'libraryitem', 'layer': 0, 'name': 'Fishing at Home and Abroad', 'pk': 23L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,191|616', 'pk': 616L}, {'referent': 'libraryexcerpt', 'layer': 1, 'name': 'MAX-FIS,38|614', 'pk': 614L}], 'edges': [{'source': 6, 'target': 7}, {'source': 6, 'target': 7}, {'source': 6, 'target': 2}, {'source': 6, 'target': 2}, {'source': 6, 'target': 0}, {'source': 6, 'target': 0}, {'source': 6, 'target': 8}, {'source': 6, 'target': 8}, {'source': 7, 'target': 3}, {'source': 0, 'target': 4}, {'source': 2, 'target': 5}, {'source': 8, 'target': 1}]}


.

### Useful commands and packages
***
#### Check ./manage.py commands:	

	$ python manage.py

.

#### Create new app:

	$ python manage.py startapp newapp
.

#### Migrations:

In new app, do

	$ python manage.py makemigrations newapp

then

	$ python manage.py migrate

If this fails, try to adapt the database by hand and fake the migration by adding the `--fake` flag.

	$ python manage.py migrate --fake

This should rebuild the database.

	$ python manage.py sqlmigrate

returns the SQL code that should change db accordingly.

.

#### Renew search index ([Haystack](http://django-haystack.readthedocs.org/en/v2.4.0/)):

Create the following files:
'search_indexes.py' in app dir,
'*targetmodel*_text.py' in project templates/search/indexes/app/ dir

	$ python manage.py rebuild_index
or	

	$ python manage.py update_index

to update or rebuild the search index. 

.

#### Clear cache ([Sorl-thumbnail](https://sorl-thumbnail.readthedocs.org/en/latest/)):

First delete the /media/cache folder.
Then,

	$ python manage.py thumbnail cleanup

According to Sorl's docs, "this cleans up the Key Value Store from stale cache. It removes
references to images that do not exist and thumbnail references and their actual files for
images that do not exist. It removes thumbnails for unknown images."

Harsher,

	$ python manage.py thumbnail clear_delete_all

"Equivalent to to clear but afterwards it will delete all thumbnail files including any
orphans	not in the Key Value Store. This can be thought of as a more aggressive version of
clear_delete_referenced. Caution should be exercised with this command if multiple Django
sites (as in SITE_ID) or projects are using the same MEDIA_ROOT since this will clear out
absolutely everything in the thumbnail cache directory causing thumbnail regeneration for
all sites and projects. When file system storage is used, it is equivalent to
rm -rf MEDIA_ROOT + THUMBNAIL_PREFIX."

.

#### Create database visualisation ([django-extensions](http://django-extensions.readthedocs.org/en/latest/)):

For app1 and app2,

	$ python manage.py graph_models app1 app2 -g -o models.png

For all apps,

	$ python manage.py graph_models -a -g -o models.png

.

#### Change database by hand ([MySQL](https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial)):

Connect to the MySQL server with the following command:

	$ mysql -u root -p

Convenient commands:

	>> SHOW DATABASES;
	>> USE database;
	>> SHOW tables;
	>> DESCRIBE table;

Force remove a table (even with a foreign key constraint):

	>> SET foreign_key_check = 0;
	>> DROP TABLE table;
	>> SET foreign_key_check = 1;

Change character set of MySQL to avoid strange unicode errors, according to [this thread](http://stackoverflow.com/questions/1008287/illegal-mix-of-collations-mysql-error):

	>> SET collation_connection = 'utf8_general_ci'

then for your databases

	>> ALTER DATABASE db CHARACTER SET utf8 COLLATE utf8_general_ci

	>> ALTER TABLE table CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci

MySQL sneaks swedish in there sometimes for no sensible reason. Change the MySQL character set to avoid strange errors of the form:

	>> `Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='`


##3. When something goes terribly wrong

###3.1. Creating and importing MySQL dump

Try to [export and import a MySQL dump file](https://dev.mysql.com/doc/refman/5.7/en/mysqldump-sql-format.html).

###3.2. Rebuilding the database from scratch
